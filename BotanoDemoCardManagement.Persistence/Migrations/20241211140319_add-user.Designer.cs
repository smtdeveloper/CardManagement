// <auto-generated />
using System;
using BotanoDemoCardManagement.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BotanoDemoCardManagement.Persistence.Migrations
{
    [DbContext(typeof(PostgreDbContext))]
    [Migration("20241211140319_add-user")]
    partial class adduser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BotanoDemoCardManagement.Domain.Entities.CardEntities.Card", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("CardName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CardTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CardTypeId");

                    b.ToTable("Cards", (string)null);
                });

            modelBuilder.Entity("BotanoDemoCardManagement.Domain.Entities.CardEntities.CardQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CardId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SortIndex")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.ToTable("CardQuestions", (string)null);
                });

            modelBuilder.Entity("BotanoDemoCardManagement.Domain.Entities.CardEntities.CardQuestionChoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CardQuestionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SortIndex")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CardQuestionId");

                    b.ToTable("CardQuestionChoices", (string)null);
                });

            modelBuilder.Entity("BotanoDemoCardManagement.Domain.Entities.CardEntities.CardType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CardTypes", (string)null);
                });

            modelBuilder.Entity("BotanoDemoCardManagement.Domain.Entities.UserEntities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("BotanoDemoCardManagement.Domain.Entities.UserEntities.UserCardAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CardId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CardId1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CardQuestionChoiceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CardQuestionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("CardId1");

                    b.HasIndex("CardQuestionChoiceId");

                    b.HasIndex("CardQuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCardAnswers", (string)null);
                });

            modelBuilder.Entity("BotanoDemoCardManagement.Domain.Entities.CardEntities.Card", b =>
                {
                    b.HasOne("BotanoDemoCardManagement.Domain.Entities.CardEntities.CardType", "CardType")
                        .WithMany("Cards")
                        .HasForeignKey("CardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardType");
                });

            modelBuilder.Entity("BotanoDemoCardManagement.Domain.Entities.CardEntities.CardQuestion", b =>
                {
                    b.HasOne("BotanoDemoCardManagement.Domain.Entities.CardEntities.Card", "Card")
                        .WithMany("Questions")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("BotanoDemoCardManagement.Domain.Entities.CardEntities.CardQuestionChoice", b =>
                {
                    b.HasOne("BotanoDemoCardManagement.Domain.Entities.CardEntities.CardQuestion", "CardQuestion")
                        .WithMany("Choices")
                        .HasForeignKey("CardQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardQuestion");
                });

            modelBuilder.Entity("BotanoDemoCardManagement.Domain.Entities.UserEntities.UserCardAnswer", b =>
                {
                    b.HasOne("BotanoDemoCardManagement.Domain.Entities.CardEntities.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BotanoDemoCardManagement.Domain.Entities.CardEntities.Card", null)
                        .WithMany("UserCardAnswers")
                        .HasForeignKey("CardId1");

                    b.HasOne("BotanoDemoCardManagement.Domain.Entities.CardEntities.CardQuestionChoice", "CardQuestionChoice")
                        .WithMany()
                        .HasForeignKey("CardQuestionChoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BotanoDemoCardManagement.Domain.Entities.CardEntities.CardQuestion", "CardQuestion")
                        .WithMany()
                        .HasForeignKey("CardQuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BotanoDemoCardManagement.Domain.Entities.UserEntities.User", "User")
                        .WithMany("UserCardAnswers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("CardQuestion");

                    b.Navigation("CardQuestionChoice");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BotanoDemoCardManagement.Domain.Entities.CardEntities.Card", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("UserCardAnswers");
                });

            modelBuilder.Entity("BotanoDemoCardManagement.Domain.Entities.CardEntities.CardQuestion", b =>
                {
                    b.Navigation("Choices");
                });

            modelBuilder.Entity("BotanoDemoCardManagement.Domain.Entities.CardEntities.CardType", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("BotanoDemoCardManagement.Domain.Entities.UserEntities.User", b =>
                {
                    b.Navigation("UserCardAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
